// Generated by CoffeeScript 1.7.1
var convert_to_BufferGeometry, dae_canvas, dae_timer, done_dae, done_json, done_obj, done_stl, json_canvas, json_timer, load_dae, load_json, load_obj, load_stl, obj_canvas, obj_timer, stl_canvas, stl_timer;

dae_canvas = new DefaultCanvas($('#dae.container'));

dae_canvas.camera.position = new THREE.Vector3(2, 0, 1);

dae_canvas.controls.target = new THREE.Vector3(0, 0, 1);

dae_timer = new THREE.Clock();

stl_canvas = new DefaultCanvas($('#stl.container'));

stl_canvas.camera.position = new THREE.Vector3(0, -2, 1);

stl_canvas.controls.target = new THREE.Vector3(0, 0, 1);

stl_timer = new THREE.Clock();

obj_canvas = new DefaultCanvas($('#obj.container'));

obj_canvas.camera.position = new THREE.Vector3(2, 0, 1);

obj_canvas.controls.target = new THREE.Vector3(0, 0, 1);

obj_timer = new THREE.Clock();

json_canvas = new DefaultCanvas($('#json.container'));

json_canvas.camera.position = new THREE.Vector3(0, 1, 2);

json_canvas.controls.target = new THREE.Vector3(0, 1, 0);

json_timer = new THREE.Clock();

convert_to_BufferGeometry = function(obj) {
  var child, g, _i, _len, _ref;
  if (obj.children != null) {
    console.log(obj.name);
    _ref = obj.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      if (child instanceof THREE.Mesh) {
        if (child.geometry instanceof THREE.Geometry) {
          g = THREE.BufferGeometryUtils.fromGeometry(child.geometry);
          child.geometry = g;
          console.log('Converted a Geometry to a BufferGeometry');
        }
      }
      convert_to_BufferGeometry(child);
    }
  }
  return null;
};

load_dae = function() {
  var loader;
  console.log('Load DAE');
  loader = new THREE.ColladaLoader();
  dae_timer.start();
  return loader.load('monkey.dae', done_dae);
};

done_dae = function(collada) {
  dae_timer.stop();
  console.log(dae_timer.elapsedTime);
  collada.scene.children[0].geometry.computeBoundingBox();
  console.log(collada.scene.children[0].geometry.boundingBox);
  collada.scene.children[0].rotation.y += Math.PI / 2;
  dae_canvas.add(collada.scene.children[0]);
  convert_to_BufferGeometry(dae_canvas.scene);
  return console.log('Loading complete');
};

load_stl = function() {
  var loader;
  console.log('Load STL');
  loader = new THREE.STLLoader();
  loader.addEventListener('load', done_stl);
  stl_timer.start();
  return loader.load('monkey.stl');
};

done_stl = function(event) {
  var geometry, mat, mesh, node;
  stl_timer.stop();
  console.log(stl_timer.elapsedTime);
  mat = new THREE.MeshLambertMaterial({
    color: 0xCCCCCC
  });
  geometry = event.content;
  mesh = new THREE.Mesh(geometry, mat);
  node = new THREE.Object3D();
  node.add(mesh);
  stl_canvas.add(node);
  return console.log('Loading complete');
};

load_obj = function() {
  var loader;
  console.log('Load OBJ');
  loader = new THREE.OBJLoader();
  obj_timer.start();
  return loader.load('monkey.obj', done_obj);
};

done_obj = function(object) {
  obj_timer.stop();
  console.log(obj_timer.elapsedTime);
  obj_canvas.scene.add(object);
  return console.log('Loading complete');
};

load_json = function() {
  var loader;
  console.log('Load json');
  loader = new THREE.JSONLoader();
  json_timer.start();
  return loader.load("monkey.js", done_json);
};

done_json = function(geometry) {
  var mesh;
  json_timer.stop();
  console.log(json_timer.elapsedTime);
  mesh = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial({
    color: 0xCCCCCC
  }));
  json_canvas.add(mesh);
  return console.log('Loading complete');
};

$('#dae.container').on('click', function() {
  load_dae();
  return $('#dae.container').off('click');
});

$('#stl.container').on('click', function() {
  load_stl();
  return $('#stl.container').off('click');
});

$('#obj.container').on('click', function() {
  load_obj();
  return $('#obj.container').off('click');
});

$('#json.container').on('click', function() {
  load_json();
  return $('#json.container').off('click');
});

//# sourceMappingURL=data:application/json;base64,